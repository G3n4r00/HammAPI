// <auto-generated />
using System;
using HammAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HammAPI.Migrations
{
    [DbContext(typeof(HammAPIDbContext))]
    [Migration("20250917174909_ModifiedCreate")]
    partial class ModifiedCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HammAPI.Models.Categoria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id_categoria");

                    b.Property<string>("Descricao")
                        .HasColumnType("text")
                        .HasColumnName("descricao");

                    b.Property<bool>("EPadrao")
                        .HasColumnType("boolean")
                        .HasColumnName("e_padrao");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo");

                    b.HasKey("Id");

                    b.ToTable("categorias", "public");
                });

            modelBuilder.Entity("HammAPI.Models.Meta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id_meta");

                    b.Property<DateTime>("DataAlvo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dia_prazo");

                    b.Property<DateTime?>("DataInicio")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_inicio");

                    b.Property<string>("Descricao")
                        .HasColumnType("text")
                        .HasColumnName("descricao");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid")
                        .HasColumnName("id_usuario");

                    b.Property<decimal?>("ValorAtual")
                        .HasColumnType("money")
                        .HasColumnName("valor_atual");

                    b.Property<decimal>("ValorObjetivo")
                        .HasColumnType("money")
                        .HasColumnName("valor_objetivo");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("metas", "public");
                });

            modelBuilder.Entity("HammAPI.Models.Orcamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id_orcamento");

                    b.Property<string>("Ano")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ano");

                    b.Property<string>("Mes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("mes");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid")
                        .HasColumnName("id_usuario");

                    b.Property<decimal>("ValorLimite")
                        .HasColumnType("money")
                        .HasColumnName("valor_limite");

                    b.Property<decimal?>("ValorUtilizado")
                        .HasColumnType("money")
                        .HasColumnName("valor_utilizado");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("orcamento", "public");
                });

            modelBuilder.Entity("HammAPI.Models.Transacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id_transacao");

                    b.Property<Guid>("CategoriaId")
                        .HasColumnType("uuid")
                        .HasColumnName("id_categoria");

                    b.Property<DateTime>("Data")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descricao");

                    b.Property<string>("MetodoPagamento")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("metodo_pagamento");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid")
                        .HasColumnName("id_usuario");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("valor");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("transacoes", "public");
                });

            modelBuilder.Entity("HammAPI.Models.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id_usuario");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("PrimeiroNome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("primeiro_nome");

                    b.Property<string>("SenhaHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("senha_hash");

                    b.Property<string>("UltimoNome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ultimo_nome");

                    b.HasKey("Id");

                    b.ToTable("usuarios", "public");
                });

            modelBuilder.Entity("HammAPI.Models.Meta", b =>
                {
                    b.HasOne("HammAPI.Models.Usuario", "Usuario")
                        .WithMany("Metas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("HammAPI.Models.Orcamento", b =>
                {
                    b.HasOne("HammAPI.Models.Usuario", "Usuario")
                        .WithMany("Orcamentos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("HammAPI.Models.Transacao", b =>
                {
                    b.HasOne("HammAPI.Models.Categoria", "Categoria")
                        .WithMany("Transacoes")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HammAPI.Models.Usuario", "Usuario")
                        .WithMany("Transacoes")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("HammAPI.Models.Categoria", b =>
                {
                    b.Navigation("Transacoes");
                });

            modelBuilder.Entity("HammAPI.Models.Usuario", b =>
                {
                    b.Navigation("Metas");

                    b.Navigation("Orcamentos");

                    b.Navigation("Transacoes");
                });
#pragma warning restore 612, 618
        }
    }
}
